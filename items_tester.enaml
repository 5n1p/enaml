


from traits.api import HasTraits, Int, Str, Float

from enaml.core.api import Looper
from enaml.modelview.api import (
    ModelEditor, EditGroup, StringEdit, IntEdit, FloatEdit, HeaderGroup,
    HeaderItem, ItemFlag, CheckState, StandardItemModel, ItemView
)
from enaml.widgets.api import Window, Container, Notebook, Page, SpinBox


class Foo(HasTraits):
    id = Int
    a = Int
    b = Int
    c = Int

    def editor(self):
        editor = FooEditor(model=self)
        return editor


class Bar(Foo):
    d = Str
    e = Str
    i = Float

    def editor(self):
        editor = BarEditor(model=self)
        return editor


class Baz(Bar):
    f = Int
    g = Int
    h = Int

    def editor(self):
        editor = BazEditor(model=self)
        return editor


enamldef FooEditor(ModelEditor):
    EditGroup:
        name = 'Ints'
        background = 'steelblue'
        IntEdit:
            background = 'indianred'
            name = 'Identifier'
            data << model.id
            flags = ItemFlag.ITEM_IS_ENABLED
        IntEdit:
            name = 'A'
            data := model.a
        IntEdit:
            name = 'B'
            background = 'lightskyblue'
            data << model.b
        IntEdit:
            name = 'C'
            foreground = 'red'
            font = 'bold 12pt arial'
            data << model.c


enamldef BarEditor(FooEditor):
    EditGroup:
        name = 'Strings'
        StringEdit:
            name = 'D'
            data << model.d
        StringEdit:
            name = 'E'
            data << model.e
            background = 'goldenrod'
        FloatEdit:
            name = 'I'
            data << model.i


enamldef BazEditor(BarEditor):
    EditGroup:
        name = 'Ints'
        IntEdit:
            name = 'F'
            data << model.f
            font = 'bold italic 24pt times'
        IntEdit:
            name = 'G'
            data << model.g
        IntEdit:
            name = 'H'
            data << model.h


def loader(model):
    return model.editor()


MODELS = []
for i in range(2000):
    if i % 5:
        cls = Baz(id=i, a=11, b=12, c=13, d='five', e='six', f=14, g=15)
    elif i % 3:
        cls = Bar(id=i, a=6, b=7, c=8, d='three', e='four')
    else:
        cls = Foo(id=i, a=1, b=2, c=3)
    MODELS.append(cls)


enamldef CustomModel(StandardItemModel):
    attr the_color = 'green'
    attr the_font = 'bold 16pt arial'
    attr the_header = h2
    HeaderGroup:
        background << the_color
        foreground = '#eeeeee'
        font << the_font
        name = 'Ints'
        HeaderItem: hdr:
            name = 'Identifier'
            check_state = CheckState.CHECKED
            flags = ItemFlag.ITEM_IS_ENABLED | ItemFlag.ITEM_IS_USER_CHECKABLE
            check_state :: print 'check state changed', check_state
        HeaderItem:
            name = 'A'
        HeaderItem:
            name = 'B'
    HeaderGroup:
        name = 'Strings'
        HeaderItem:
            name = 'D'
            check_state = CheckState.CHECKED
            flags << (ItemFlag.ITEM_IS_ENABLED | ItemFlag.ITEM_IS_USER_CHECKABLE) if hdr.check_state else ItemFlag.ITEM_IS_USER_CHECKABLE
        HeaderItem:
            name = 'I'
    HeaderGroup:
        background = 'gray'
        name = 'Ints'
        font = '800 14pt "Source Code Pro"'
        HeaderItem:
            name = 'F'
            data = 'Foo bar baz'
        HeaderItem:
            name = 'G'
        HeaderItem:
            name = 'C'
        HeaderItem:
            name = 'H'
    HeaderGroup:
        name = 'Strings'
        HeaderItem: h2:
            name = 'E'
            data = 'End'


from enaml.widgets.api import ComboBox, Field, PushButton


enamldef Main(Window):
    Container:
        SpinBox:
            value := MODELS[0].a
        ComboBox:
            items = ['top', 'left', 'right', 'bottom']
            index = 1
            selected_item >> m.header_location
        Field:
            text := m.the_color
        Field:
            text := m.the_font
        Field:
            text := m.the_header.data
        PushButton:
            clicked ::
                import pprint
                pprint.pprint(m._item_model._items[12].__dict__)
        ItemView:
            CustomModel: m:
                header_location = 'left'
                models = MODELS
                editor_loader = loader


