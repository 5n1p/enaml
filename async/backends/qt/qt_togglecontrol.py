

from .qt_control import QtControl

# This sample assumes that the superclass heierarchy from QtControl up 
# is in place and working properly


class QtToggleControl(QtControl):
    """ A base class for Qt toggle widgets.

    This class can serve as a base class for widgets that implement 
    toggle behavior such as CheckBox, RadioButton and checkable 
    PushButtons. It is not meant to be used directly. Subclasses should
    implement the 'create' and 'bind' methods.

    Furthermore, the toggled, pressed and released event that is 
    generated by the toolkit widget needs to be bound to the 
    on_toggled(), on_pressed() and on_released() methods.

    """
    #--------------------------------------------------------------------------
    # Setup Methods
    #--------------------------------------------------------------------------
    def create(self, parent):
        # The creation method does not change. The parent will be a 
        # native Qt widget or None. For the toggle control, sublasses
        # (like Checkbox) must create a widget
        raise NotImplementedError

    def initialize(self, init_attrs):
        # The initialize method now takes a dictionary which contains the 
        # initialization attrs (instead of calling back to the shell obj)
        super(QtToggleControl, self).initialize(init_attrs)

        # Assuming the use of the key 'text', this depends on the formal protocol
        self.set_text(init_attrs['text']) 

        # Assuming the use of the key 'checked', this depends on the formal protocol
        self.set_checked(init_attrs['checked'])

    def bind(self):
        # The bind method still exists, the semantics are still the same
        super(QtToggleControl, self).bind()

    #--------------------------------------------------------------------------
    # Message Handlers
    #--------------------------------------------------------------------------
    def receive_set_checked(self, ctxt):
        self.set_checked(ctxt['checked'])

    def receive_set_text(self, ctxt):
        self.set_text(ctxt['text'])
        # Trigger a relayout since the size hint likely changed

    #--------------------------------------------------------------------------
    # Signal Handlers
    #--------------------------------------------------------------------------
    def on_toggled(self):
        """ The event handler for the toggled event.

        """
        # XXX We may want to think about batch sending
        self.send('update_check', dict(checked=self.widget.isChecked()))
        self.send('toggled', {})

    def on_pressed(self):
        """ The event handler for the pressed event.

        """
        self.send('pressed', {})

    def on_released(self):
        """ The event handler for the released event.

        """
        self.send('released', {})

    #--------------------------------------------------------------------------
    # Widget update methods
    #--------------------------------------------------------------------------
    def set_text(self, text):
        """ Sets the widget's text with the provided value.

        """
        self.widget.setText(text)

    def set_checked(self, checked):
        """ Sets the widget's checked state with the provided value.

        """
        widget = self.widget
        # This handles the case where, by default, Qt will not allow
        # all of the radio buttons in a group to be disabled. By 
        # temporarily turning off auto-exclusivity, we are able to
        # handle that case.
        if not checked and widget.isChecked() and widget.autoExclusive():
            widget.setAutoExclusive(False)
            widget.setChecked(checked)
            widget.setAutoExclusive(True)
        else:
            widget.setChecked(checked)

