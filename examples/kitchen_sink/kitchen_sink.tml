""" A demonstration of various TraitsML features. """


from traitsml.constants import Layout, Orientation, SizePolicy, TickPosition

TabGroup main_container:
    x ~~ model.x
    y ~~ model.y
    width ~~ model.width
    height ~~ model.height
    movable = True
    tab_names << {first_tab: 'Spam Tab' if tab_name_check.checked else 'Widgets Tab',
                  second_tab: 'Ham Tab' if tab_name_check.checked else 'Plot Tab'}
    VGroup first_tab:
        VGroup child_container:
            Label:
                text = "Just a Label."
            HGroup:
                LineEdit:
                    text ~~ model.button1_text
                LineEdit line_edit2:
                    text = "I am button 2..."
            HGroup:
                PushButton button1:
                    # Change the text if the button is pressed
                    text << 'Pressed!' if self.down else model.button1_text
                    # Call back into Python code when the button is clicked
                    # with the current position of the main_container.
                    clicked >> model.button1_clicked(main_container.pos)
                    visible << button_visible_check.checked
                PushButton button2:
                    text << "... and now I'm pressed." if self.down else line_edit2.text
                    # Have the controller open the dialog when clicked.
                    clicked >> controller.launch_dialog()
        Element foo_elem:
            # The base Element type can be used as an empty canvas
            # to allow for the absolute position of child elements.
            # This ability is demonstrated here with the child RadioButton.
            layout = Layout.ABSOLUTE
            size_hint = (-1, 50)
            size_policy = (SizePolicy.IGNORED, SizePolicy.FIXED)
            RadioButton radiob:
                width << parent.width
                height = 50
                # The x position of the button in the element is
                # tied to the y position of the main container.
                x << int(parent.width * (main_container.y / 1000.0))
                # Change the text of the button depending of if it's toggled
                text << "I'm toggled!" if self.checked else "Move the window vertically!"
        HGroup:
            CheckBox tab_name_check:
                text = "Change Tab Names"
            CheckBox button_visible_check:
                text = "Visibility"
                checked = True
            CheckBox:
                text = "check 3"
            Element:
                # VGroup and HGroup are just convience elements. The layout
                # is a property on all Elements which can be modified.
                layout << Layout.VERTICAL if vert.checked else Layout.HORIZONTAL
                RadioButton horiz:
                    text = "horizontal layout"
                    checked = True
                RadioButton vert:
                    text = "vertical layout"
            CheckBox:
                text = "check 4"
        GroupBox:
            title = "Foo Group"
            checkable = True
            layout = Layout.VERTICAL
            Form my_form:
                Label:
                    text = "A Label"
                Field my_field:
                    value = "What"
                Label:
                    text = "Another Label"
                Field:
                    value = "Another Value"
                Label:
                    visible << fourth_val.value == 'fifth' 
                    text = "Third"
                Field:
                    value = "Third value"
                Label:
                    text = "Type 'fifth' to show third"
                Field fourth_val:
                    value = ""
        HGroup:
            VGroup:
                size_policy = (SizePolicy.MAXIMUM, SizePolicy.DEFAULT)
                size_hint = (100, -1)
                RadioButton vert_button:
                    text = "Vertical"
                    checked = True
                RadioButton:
                    text = "Horizontal"
                CheckBox tick_box:
                    text = "Show Ticks"
            Slider my_slider:
                size_policy = (SizePolicy.IGNORED, SizePolicy.DEFAULT)
                value = 0
                to_slider = lambda val: val / 10.0
                from_slider = lambda pos: int(pos * 10.0)
                tick_interval = 0.2
                orientation << Orientation.VERTICAL if vert_button.checked else Orientation.HORIZONTAL
                tick_pos << TickPosition.BOTH_SIDES if tick_box.checked else TickPosition.DEFAULT
                value >> print(self.value)
            Label:
                text << str(my_slider.value)
    TraitsUIItem second_tab:
        model = plot_ui


# TODO make some Dialog elements so we don't have to fake it like this.
VGroup dialog:
    width = 200   
    height = 100  
    Label:
        text = "Just some radio buttons"
    HGroup:
        RadioButton:
            text = "Radio 1"
        RadioButton:
            text = "Radio 2"
        RadioButton:
            text = "Radio 4"
    PushButton:
        text = "Ok"
        clicked >> controller.close_dialog()


