#------------------------------------------------------------------------------
#  Copyright (c) 2013, Enthought, Inc.
#  All rights reserved.
#
# Special thanks to Steven Silvester for contributing this module!
#------------------------------------------------------------------------------
from atom.api import ForwardInstance, observe, set_default

from enaml.core.declarative import d_

from .control import Control


#: Delay the import of HasTraits until needed.
def HasTraits():
    from traits.has_traits import HasTraits
    return HasTraits


#: Delay the import of View until needed.
def View():
    from traitsui.view import View
    return View


#: Delay the import of Handler until needed.
def Handler():
    from traitsui.handler import Handler
    return Handler


class TraitsItem(Control):
    """ A control which can be used to embded a traits ui view.

    """
    #: The traits model being displayed. If no other view is given, the
    #: view will be retrieved by calling `model.edit_traits()`.
    model = d_(ForwardInstance(HasTraits))

    #: An optional traits ui View definition to use in lieu of the
    #: default view generated by the model.
    view = d_(ForwardInstance(View))

    #: An optional traits ui Handler definition to use in lieu of the
    #: default handler generated by the model.
    handler = d_(ForwardInstance(Handler))

    #: TraitsItem widgets expand freely in height and width by default.
    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    #--------------------------------------------------------------------------
    # Messenger API
    #--------------------------------------------------------------------------
    def snapshot(self):
        """ Get the snapshot dictionary for the TraitsItem widget.

        """
        snap = super(TraitsItem, self).snapshot()
        snap['model'] = self.model
        snap['view'] = self.view
        snap['handler'] = self.handler
        return snap

    @observe(r'^(model|view|handler)$')
    def send_member_change(self, change):
        """ An observer which sends state change to the client.

        """
        # The superclass handler implementation is sufficient.
        super(TraitsItem, self).send_member_change(change)

