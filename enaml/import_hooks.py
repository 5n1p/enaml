import os
import sys
import types
from enaml.parsing.enaml_compiler import EnamlCompiler

def parse_enaml(enaml_path):
    """ Returns the ast generated by the enaml parser.

    Arguments
    ---------
    enaml_path : string
        The full path to the .enaml file.

    """
    from .parsing import parser
    with open(enaml_path) as f:
        enaml_source = f.read()
    return parser.parse(enaml_source)


def add_import_node(node, module):
    """ Adds enaml python imports to a module's scope.

    Arguments
    ---------
    node : EnamlPyImport
        The enaml import ast node.
    
    module : ModuleType
        The module in which to execute and add the imports.

    """
    code = compile(node.py_ast, 'Enaml', mode='exec')
    exec code in {}, module.__dict__


def add_define_node(node, module):
    """ Creates and adds an enaml component factory to a module.

    Arguments
    ---------
    node : EnamlDefine
        The define ast node.
    
    module : ModuleType
        The module in which to add the component factory.

    """
    from .factory import ComponentFactory
    mod_dict = module.__dict__
    mod_dict[node.name] = ComponentFactory(node, mod_dict)


def load_enaml_module(enaml_path, module):
    """ Parses an enaml file and adds the appropriate items to a module.

    Arguments
    ---------
    enaml_path : string
        The path to a .enaml file.

    module : ModuleType
        The module in which to add the enaml items.

    """
    from .parsing import enaml_ast
    enaml_module_ast = parse_enaml(enaml_path)
    module.__enaml_module_ast__ = enaml_module_ast
    for item in enaml_module_ast.items:
        if isinstance(item, enaml_ast.EnamlPyImport):
            add_import_node(item, module)
        elif isinstance(item, enaml_ast.EnamlDefine):
            add_define_node(item, module)


class EnamlModuleFinder(object):
    """ A sys.meta_path finder object for enaml modules.

    An instance of this class can be added to sys.meta_path to enable
    the import of enaml files using the normal Python import machinery.

    """
    @classmethod
    def instance(cls):
        """ Returns a singleton instance of this class. There is no
        need for more than one instance.

        """
        if hasattr(cls, '_instance'):
            res = cls._instance
        else:
            res = cls._instance = cls()
        return res

    @classmethod
    def install(cls):
        """ Installs an instance of this class into sys.meta_path.

        """
        instance = cls.instance()
        if instance not in sys.meta_path:
            sys.meta_path.append(instance)
    
    @classmethod
    def uninstall(cls):
        """ Uninstalls the instance of this class from sys.meta_path.

        """
        instance = cls.instance()
        if instance in sys.meta_path:
            sys.meta_path.remove(instance)

    def find_module(self, fullname, path=None):
        """ Searches the package path or sys.path for a .enaml module
        with the given full name. If found, returns a loader object.

        """
        if path is not None:
            stem = fullname.rsplit('.', 1)[-1] + os.path.extsep + 'enaml'
            for root in path:
                enaml_path = os.path.join(root, stem)
                if os.path.exists(enaml_path):
                    return EnamlModuleLoader(enaml_path)
        elif '.' in fullname:
            return
        else:
            stem = fullname + os.path.extsep + 'enaml'
            for root in sys.path:
                enaml_path = os.path.join(root, stem)
                if os.path.exists(enaml_path):
                    return EnamlModuleLoader(enaml_path)

    
class EnamlModuleLoader(object):
    """ A loader object which will load an enaml file into a py module.

    An instance of this class is returned by an EnamlModuleFinder if
    it located a suitable .enaml file for import. This loader will
    parse that file and load its contents into a Python module which
    is added to sys.modules. Normal reload semantics are supported.

    """
    def __init__(self, enaml_module_path):
        """ Initialize a loader object.

        Parameters
        ----------
        enaml_module_path : string
            The path to the .enaml file.

        """
        self.enaml_module_path = enaml_module_path

    def load_module(self, fullname):
        """ Loads and returns the Python module for the given enaml path.
        The created module is added to sys.modules.

        """
        mod = sys.modules.setdefault(fullname, types.ModuleType(fullname))
        path = self.enaml_module_path
        mod.__path__ = path
        mod.__loader__ = self
        load_enaml_module(path, mod)
        return mod

