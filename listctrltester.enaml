from enaml.widgets.api import Window, Container, ComboBox, PushButton, FileDialog, Splitter, Include, SplitItem, Field
from enaml.widgets.list_control import ListControl
from enaml.widgets.list_item import ListItem
from enaml.icon_provider import IconProvider, Icon, IconImage
from enaml.image_provider import Image
from enaml.core.api import Looper


def foo(item):
    print item
    return eval(item)


CHECKS = [None, True, False]


class MyIconProvider(IconProvider):
    """ A custom icon provider for the icon example.

    """
    path = './examples/icons_and_images/example_images/inwood_park.jpg'

    def request_icon(self, path, callback):
        """ Load the requested icon.

        Parameters
        ----------
        path : str
            The requested path of the icon, with the provider prefix
            removed. For example, if the full icon source path was:
            'icon://myicons/window-icon' then the path passed to this
            method will be `/window-icon`.

        callback : callable
            A callable which should be invoked when the icon is loaded.
            It accepts a single argument, which is the loaded `Icon`
            object. It is safe to invoke this callable from a thread.

        """
        # The mapping from icon name -> path is hard coded here, but
        # a typical application will have a way to resolve these paths
        # at runtime.
        with open(self.path, 'rb') as f:
            data = f.read()
        image = Image(data=data)
        icon_img = IconImage(image=image)
        icon = Icon(images=[icon_img])
        callback(icon)


enamldef Main(Window):
    activated :: session.resource_manager.icon_providers['foo'] = MyIconProvider()
    Container:
        PushButton:
            clicked ::
                for item in looper.items[::2]:
                    item[0].visible = not item[0].visible
        PushButton:
            clicked ::
                looper.iterable = xrange(25, 30)
                for c in lc.children:
                    if hasattr(c, 'text'):
                        print c.text
                    else:
                        print c
        PushButton:
            clicked :: lc.refresh_items_layout()
        Field:
            text := item.text
        ComboBox: cbox:
            items = [str(i) for i in CHECKS]
            index = 0
        ListControl: lc:
            view_mode = 'icon'
            icon_size = (100, 50)
            item_spacing = 10
            #resize_mode = 'fixed'
            #layout_mode = 'batched'
            item_wrap = False
            flow = 'top_to_bottom'
            ListItem: item:
                text = 'First'
                background = 'red'
                editable = True
                tool_tip << text
                checkable = True
                checked << foo(cbox.items[cbox.index])
                checked :: cbox.index = CHECKS.index(checked)
                clicked :: print 'i was clicked'
                double_clicked :: print 'i was double clicked'
                icon_source = 'icon://foo/bar'
            Looper: looper:
                iterable = xrange(1000)
                ListItem:
                    text='Foo Bar ' + unicode(loop_index)
                    text_align='center'
                    vertical_text_align='top'
                    background='lightskyblue' if loop_index % 2 else 'rgba(96, 132, 34, 0.5)'
                    foreground='steelblue' if loop_index % 2 else ''
                    font='0.5in small-caps' if loop_index % 2 else ''
                    #preferred_size = (100, 55)
                    #checkable=True
                    #checked=True
                    icon_source = 'icon://foo/bar'
            #ListItem:
            #    text = 'Last'
